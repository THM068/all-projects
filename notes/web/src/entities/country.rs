//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "country")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub code: String,
    pub name: String,
    pub continent: String,
    pub region: String,
    #[sea_orm(column_type = "Float")]
    pub surfacearea: f32,
    pub indepyear: Option<i16>,
    pub population: i32,
    #[sea_orm(column_type = "Float", nullable)]
    pub lifeexpectancy: Option<f32>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub gnp: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((10, 2)))", nullable)]
    pub gnpold: Option<Decimal>,
    pub localname: String,
    pub governmentform: String,
    pub headofstate: Option<String>,
    pub capital: Option<i32>,
    pub code2: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::city::Entity",
        from = "Column::Capital",
        to = "super::city::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    City,
    #[sea_orm(has_many = "super::countrylanguage::Entity")]
    Countrylanguage,
}

impl Related<super::city::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::City.def()
    }
}

impl Related<super::countrylanguage::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Countrylanguage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
